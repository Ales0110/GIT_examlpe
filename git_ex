# Создать новый репозиторий

```bash
git init # создать новый проект в текущей папке
git init folder-name # создать новый проект в указанной папке
```

# Клонирование репозитория

```bash
git clone git@github.com:ales0110/git_ex.git # клонировать удаленный репозиторий в одноименную папку
git clone git@github.com:ales0110/git_ex.git name # клонировать удаленный репозиторий в папку «name»
```

# Добавление файлов к отслеживанию, индексация отслеживаемых

```bash
git add text.txt # добавить к отслеживанию этот существующий файл
git add . # добавить к отслеживанию все новые файлы из текущей папки и её подпапок, индексировать отслеживаемые файлы
git add -i # запуск оболочки интерактивного индексирования для добавления в индекс только выбранных файлов
```

# Отмена индексации

```bash
git reset HEAD # убрать из индекса все индексированные файлы
git reset HEAD text.txt # убрать из индекса указанный файл
```

# Отмена изменений

```bash
git checkout -- text.txt # отменить все изменения, внесенные в файл со времени предыдущего коммита
git checkout text.txt # отменить изменения в непроиндексированном файле
```

# Просмотр изменений

```bash
git diff # посмотреть непроиндексированные изменения (если есть, иначе ничего не выведет)
git diff --staged # посмотреть проиндексированные изменения (если есть, иначе ничего не выведет)
```

# Коммиты

```bash
git commit -m "Name of commit" # закоммитить отслеживаемые индексированные файлы (указано название коммита)
git commit -m -a "Name of commit" # закоммитить отслеживаемые индексированные файлы (указано название коммита, не требует git add, не добавит в коммит неотслеживаемые файлы)
git commit # закоммитить отслеживаемые индексированные файлы (откроется редактор для введения названия коммита)
git commit --amend # изменить последний коммит (Insert — режим ввода, : — командный режим; в командном режиме: :wq — сохранить и выйти)
```

# Удаление файла

```bash
git rm text.txt # удалить из отслеживаемых неиндексированный файл (файл будет удален из папки)
git rm -f text.txt # удалить из отслеживаемых индексированный файл (файл будет удален из папки)
git rm -r log/ # удалить из отслеживаемых всё содержимое папки log/ (папка будет удалена)
git rm ind* # удалить из отслеживаемых все файлы с именем, начинающимся на «ind» в текущей папке (файлы будут удалены из папки)
```

# Перемещение/переименование файлов

```bash
git mv text.txt test_1.txt # переименовать файл «text.txt» в «test_1.txt»
git mv readme.md folder/ # переместить файл readme в папку folder/ (должна существовать)
```

# История изменений

```bash
git log -2 # показать последние 2 коммита
git log -2 --stat # показать последние 2 коммита и статистику внесенных ими изменений
git log -p -2 # показать последние 2 коммита и внесенную ими разницу на уровне строк (выход из длинного лога: Q)
git log --pretty=format:"%h - %an, %ar : %s" -4 # показать последние 4 коммита с форматированием выводимых данных
git log --graph -10 # показать последние 10 коммитов с ASCII-представлением ветвления
git log --since=2.weeks # показать коммиты за последние 2 недели
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short # мой формат вывода, висящий на алиасе оболочки
git log master..branch_99 # показать коммиты из ветки branch_99, которые не влиты в master
git log branch_99..master # показать коммиты из ветки master, которые не влиты в branch_99
git show 41f6542 # показать изменения из коммита с указанным хешем
git show HEAD^ # показать данные о предыдущем коммите
```

# Ветки

```bash
git branch # показать список веток
git branch -v # показать список веток и последний коммит в каждой
git branch new_branch # создать новую ветку с указанным именем
git checkout new_branch # перейти в указанную ветку
git checkout -b new_branch # создать новую ветку с указанным именем и перейти в неё
git merge hotfix # влить в ветку, в которой находимся, данные из ветки hotfix
git branch -d hotfix # удалить ветку hotfix (если её изменения уже влиты в главную ветку)
git branch --merged # показать ветки, уже слитые с активной (их можно удалять)
git branch --no-merged # показать ветки, не слитые с активной
git branch -a # показать все имеющиеся ветки (в т.ч. на удаленных репозиториях)
```

# Удалённые репозитории

```bash
git remote -v # показать список удалённых репозиториев, связанных с этим
git remote add origin git@github.com:ales0110/git_ex.git # добавить удалённый репозиторий
git remote show origin # получить данные об удалённом репозитории с сокращенным именем origin
git fetch origin # скачать все ветки с удаленного репозитория (с сокр. именем origin), но не сливать со своими ветками
git fetch origin main # то же, но скачивается только указанная ветка
git checkout origin/github_branch # посмотреть ветку, скачанную с удалённого репозитория (локальной редактируемой копии не создаётся! если нужно редактировать, придётся влить)
git checkout --track origin/github_branch # создать локальную ветку github_branch (данные взять из удалённого репозитория с сокр. именем origin, ветка github_branch) и переключиться на неё
git push origin main # отправить в удалённый репозиторий (с сокр. именем origin) данные своей ветки master
git pull origin # влить изменения с удалённого репозитория (все ветки)
git pull origin main # влить изменения с удалённого репозитория (только указанная ветка)
```

# Удаление из репозитория всех неотслеживаемые файлы

```bash
git clean -f # удалить из репозитория все неотслеживаемые файлы
```
